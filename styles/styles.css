<!doctype html>
<html lang="en" data-theme="light">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Pharmacy ‚Ä¢ Hospital ERP</title>

  <!-- Unified styles + utilities -->
  <link rel="stylesheet" href="../styles/styles.css?v=6" />
  <script src="../scripts/utils.js?v=6" defer></script>
  <script src="../scripts/scanner.js?v=6" defer></script>

  <style>
    /* Tiny page-specific helpers (kept minimal) */
    .right-actions{display:flex; gap:10px; flex-wrap:wrap; align-items:center}
    .table { width:100%; border-collapse: collapse; }
    .table th, .table td { padding:10px 12px; border-bottom:1px solid rgba(0,0,0,.06); }
    html[data-theme="dark"] .table th, html[data-theme="dark"] .table td { border-bottom:1px solid rgba(255,255,255,.1); }
    .num{text-align:right}
    .muted-sm{font-size:.92rem; opacity:.85}
    .pill{padding:6px 10px;border-radius:999px;background:var(--card-bg);border:1px solid rgba(0,0,0,.06)}
    html[data-theme="dark"] .pill{border-color:rgba(255,255,255,.12)}
    .hide{display:none!important}
  </style>
</head>
<body>

  <!-- Banner (unified) -->
  <header class="banner">
    <img src="../public/assets/abhaya-logo-wide.png" alt="ABHAYA HOSPITAL" />
    <button id="themeToggle" class="floating-toggle" aria-label="Toggle theme">üåô</button>
  </header>

  <!-- Fixed actions (unified) -->
  <nav class="fixed-actions">
    <a class="chip" href="../index.html">‚Üê Dashboard</a>
    <button class="chip" id="clearCacheBtn">Clear Cache</button>
  </nav>

  <!-- Page header -->
  <section class="section">
    <h2>Pharmacy</h2>
    <p class="muted mt8">Sell ‚Ä¢ Purchase ‚Ä¢ Stock ‚Ä¢ Reports</p>
    <div class="chips mt12" id="phTabs">
      <button class="chip active" data-tab="sell">Sell</button>
      <button class="chip" data-tab="purchase">Purchase</button>
      <button class="chip" data-tab="stock">Stock</button>
      <button class="chip" data-tab="reports">Reports</button>
    </div>
  </section>

  <!-- SELL -->
  <section class="section ph-tab" id="ph-sell">
    <h3>Quick POS</h3>
    <p class="muted-sm mt8">Search or scan barcode to add to cart</p>

    <div class="toolbar mt16">
      <div class="left">
        <span class="pill" id="patientStatus">No patient linked</span>
      </div>
      <div class="right">
        <button class="chip action" id="scanPatient">üì∑ Scan Patient ID</button>
        <button class="chip" id="newPatient">New Patient ID</button>
      </div>
    </div>

    <div class="toolbar mt16">
      <div class="left">
        <input class="input--sm" type="search" id="itemSearch" placeholder="Search item name or scan‚Ä¶" />
        <button class="chip action" id="scanItem">üì∑ Scan Item</button>
        <button class="chip" id="loadDemo">Load Demo</button>
      </div>
      <div class="right">
        <span class="pill">Cart items: <b id="cartCount">0</b></span>
        <span class="pill">Total: <b id="cartTotal">0.00</b></span>
      </div>
    </div>

    <div class="chart-wrap mt16">
      <div class="chart-title">Cart</div>
      <div class="table-wrap">
        <table class="table" id="cartTable">
          <thead>
            <tr>
              <th style="width:28%">Item</th>
              <th>Batch</th>
              <th class="num">Qty</th>
              <th class="num">MRP</th>
              <th class="num">GST%</th>
              <th class="num">Line</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="cartBody"><tr><td colspan="7" class="muted">Cart is empty</td></tr></tbody>
        </table>
      </div>
    </div>

    <div class="toolbar mt16">
      <div class="left">
        <button class="btn" id="checkoutBtn">Checkout</button>
      </div>
      <div class="right">
        <button class="btn btn--ghost" id="clearCartBtn">Clear</button>
      </div>
    </div>
  </section>

  <!-- PURCHASE -->
  <section class="section ph-tab" id="ph-purchase" hidden>
    <h3>Purchase</h3>
    <div class="toolbar mt12">
      <input class="input--sm" id="pSupplier" type="text" placeholder="Supplier name" />
      <input class="input--sm" id="pInvoiceNo" type="text" placeholder="Supplier invoice #" />
      <input class="input--sm" id="pDate" type="date" />
      <button class="chip action" id="scanBatch">üì∑ Scan Batch</button>
      <button class="chip" id="pAdd">Add Row</button>
      <button class="btn" id="pSave">Save</button>
    </div>
    <div class="chart-wrap mt16">
      <div class="chart-title">Items</div>
      <table class="table" id="purchaseTable">
        <thead>
          <tr>
            <th style="width:28%">Item</th>
            <th>Batch</th>
            <th class="num">Qty</th>
            <th class="num">Cost</th>
            <th class="num">MRP</th>
            <th class="num">GST%</th>
            <th></th>
          </tr>
        </thead>
        <tbody id="purchaseBody"><tr><td colspan="7" class="muted">Add purchase items‚Ä¶</td></tr></tbody>
      </table>
    </div>
  </section>

  <!-- STOCK -->
  <section class="section ph-tab" id="ph-stock" hidden>
    <h3>Stock</h3>
    <div class="toolbar mt12">
      <input class="input--sm" id="sSearch" type="search" placeholder="Search item / batch / HSN‚Ä¶" />
      <select class="select--sm" id="sFilter">
        <option value="">All</option>
        <option value="near">Near Expiry (‚â§60d)</option>
        <option value="expired">Expired</option>
        <option value="low">Low Stock</option>
      </select>
      <button class="chip" id="sExport">Export CSV</button>
    </div>
    <div class="chart-wrap mt16">
      <div class="chart-title">Current Stock</div>
      <table class="table" id="stockTable">
        <thead>
          <tr>
            <th style="width:30%">Item</th>
            <th>Batch</th>
            <th>Expiry</th>
            <th class="num">Qty</th>
            <th class="num">MRP</th>
            <th class="num">GST%</th>
          </tr>
        </thead>
        <tbody id="stockBody"><tr><td colspan="6" class="muted">Loading inventory‚Ä¶</td></tr></tbody>
      </table>
    </div>
  </section>

  <!-- REPORTS -->
  <section class="section ph-tab" id="ph-reports" hidden>
    <h3>Pharmacy Reports</h3>
    <div class="chips range mt8" id="rRange">
      <button class="chip active" data-range="today">Today</button>
      <button class="chip" data-range="7d">7D</button>
      <button class="chip" data-range="30d">30D</button>
      <button class="chip" data-range="mtd">MTD</button>
    </div>

    <div class="kpi-grid mt16">
      <div class="kpi panel--blue">
        <h4>Total (‚Çπ)</h4><div class="num" id="rTotal">0.00</div>
      </div>
      <div class="kpi panel--mint">
        <h4>Invoices</h4><div class="num" id="rBills">0</div>
      </div>
      <div class="kpi panel--peach">
        <h4>Items sold</h4><div class="num" id="rItems">0</div>
      </div>
      <div class="kpi panel--lilac">
        <h4>Top item</h4><div class="num" id="rTop">‚Äî</div>
      </div>
    </div>
  </section>

  <script>
  // ===== Helpers =====
  const $ = (sel, root=document) => root.querySelector(sel);
  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

  const CSV = {
    parse(text){
      // minimal CSV parser (handles commas inside quotes)
      const lines = text.trim().split(/\r?\n/);
      const head = lines.shift().split(',').map(h => h.trim());
      const rows = [];
      for (const line of lines){
        const cells = [];
        let cur = '', q = false;
        for (let i=0;i<line.length;i++){
          const c = line[i];
          if (c === '"' ){ q = !q; continue; }
          if (c === ',' && !q){ cells.push(cur); cur=''; continue; }
          cur += c;
        }
        cells.push(cur);
        const obj = {};
        head.forEach((h, i) => obj[h] = (cells[i] ?? '').replace(/^"(.*)"$/,'$1'));
        rows.push(obj);
      }
      return rows;
    }
  };

  const state = {
    inventory: [],
    cart: [],
    patient: null,
    purchases: [],
    invoices: [],
    invoiceItems: []
  };

  function money(n){ n = Number(n||0); return n.toFixed(2); }
  function persist(){ localStorage.setItem('phCart', JSON.stringify(state.cart)); localStorage.setItem('phPatient', JSON.stringify(state.patient)); }
  function restore(){
    try{ state.cart = JSON.parse(localStorage.getItem('phCart')||'[]'); }catch{}
    try{ state.patient = JSON.parse(localStorage.getItem('phPatient')||'null'); }catch{}
    renderCart(); renderPatient();
  }

  // ===== Theme & Actions =====
  window.addEventListener('DOMContentLoaded', async () => {
    if (window.UI?.initTheme) UI.initTheme('#themeToggle');

    // clear cache
    $('#clearCacheBtn')?.addEventListener('click', () => {
      caches?.keys?.().then(keys => keys.forEach(k => caches.delete(k)));
      localStorage.clear();
      alert('Cache cleared.');
    });

    // tabs
    $('#phTabs').addEventListener('click', (e)=>{
      const b = e.target.closest('.chip'); if(!b) return;
      $$('#phTabs .chip').forEach(c => c.classList.remove('active'));
      b.classList.add('active');
      const id = b.dataset.tab;
      $$('.ph-tab').forEach(sec => sec.hidden = sec.id !== 'ph-' + id);
    });

    // load CSVs
    await loadData();

    // POS bindings
    $('#scanItem').addEventListener('click', () => startScan('item'));
    $('#itemSearch').addEventListener('input', onSearchItem);
    $('#loadDemo').addEventListener('click', addDemoRow);

    // patient link
    $('#scanPatient').addEventListener('click', () => startScan('patient'));
    $('#newPatient').addEventListener('click', newPatientDialog);

    // cart actions
    $('#checkoutBtn').addEventListener('click', checkout);
    $('#clearCartBtn').addEventListener('click', () => { state.cart = []; renderCart(); persist(); });

    // purchase
    $('#pAdd').addEventListener('click', () => addPurchaseRow());
    $('#pSave').addEventListener('click', () => alert('Saved (stub)'));

    // stock
    $('#sSearch').addEventListener('input', renderStock);
    $('#sFilter').addEventListener('change', renderStock);
    $('#sExport').addEventListener('click', exportStock);

    // reports
    $('#rRange').addEventListener('click', (e)=>{
      const b = e.target.closest('.chip'); if(!b) return;
      $$('#rRange .chip').forEach(c => c.classList.remove('active')); b.classList.add('active');
      renderReports();
    });

    restore();
    renderStock();
    renderReports();
  });

  async function loadData(){
    const inv = await fetch('../data/inventory.csv').then(r=>r.text()).catch(()=> '');
    if (inv) state.inventory = CSV.parse(inv);

    // optional: invoices + items for reports
    try{
      const invoices = await fetch('../data/invoices.csv').then(r=>r.text());
      const items = await fetch('../data/invoice_items.csv').then(r=>r.text());
      state.invoices = CSV.parse(invoices);
      state.invoiceItems = CSV.parse(items);
    }catch{}
  }

  // ===== Sell / POS =====
  function onSearchItem(e){
    const q = e.target.value.trim().toLowerCase();
    if (q.length < 2) return;
    const item = state.inventory.find(i => (i.name||'').toLowerCase().includes(q));
    if (item) addToCart(item);
  }

  function addDemoRow(){
    const demo = state.inventory[0] || { name:'Paracetamol 500', batch:'P001', qty:100, mrp:25, gst:12 };
    addToCart(demo);
  }

  function addToCart(item){
    const row = {
      name: item.name || item.Item || item.item || 'Item',
      batch: item.batch || item.Batch || '',
      qty: 1,
      mrp: Number(item.mrp || item.MRP || 0),
      gst: Number(item.gst || item.GST || 0)
    };
    state.cart.push(row);
    renderCart(); persist();
  }

  function renderCart(){
    const body = $('#cartBody');
    body.innerHTML = '';
    if (!state.cart.length){
      body.innerHTML = '<tr><td colspan="7" class="muted">Cart is empty</td></tr>';
      $('#cartCount').textContent = '0';
      $('#cartTotal').textContent = '0.00';
      return;
    }
    let total = 0;
    state.cart.forEach((r, idx) => {
      const line = r.qty * r.mrp;
      total += line;
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${r.name}</td>
        <td>${r.batch||''}</td>
        <td class="num">
          <input type="number" min="1" value="${r.qty}" style="width:76px" class="input--sm qty" data-i="${idx}">
        </td>
        <td class="num">${money(r.mrp)}</td>
        <td class="num">${r.gst||0}</td>
        <td class="num">${money(line)}</td>
        <td><button class="chip" data-del="${idx}">Remove</button></td>
      `;
      body.appendChild(tr);
    });

    body.addEventListener('input', e=>{
      const q = e.target.closest('.qty'); if(!q) return;
      const i = Number(q.dataset.i); const v = Math.max(1, Number(q.value||1));
      state.cart[i].qty = v; renderCart(); persist();
    }, { once:true });

    body.addEventListener('click', e=>{
      const b = e.target.closest('button[data-del]'); if(!b) return;
      state.cart.splice(Number(b.dataset.del),1); renderCart(); persist();
    }, { once:true });

    $('#cartCount').textContent = String(state.cart.length);
    $('#cartTotal').textContent = money(total);
  }

  function checkout(){
    if (!state.cart.length) return alert('Cart is empty');
    const pid = state.patient?.patient_id || state.patient?.id || 'WALKIN';
    alert(`Invoice created for ${pid}\nItems: ${state.cart.length}\nTotal ‚Çπ${$('#cartTotal').textContent}`);
    state.cart = []; renderCart(); persist();
  }

  // ===== Patient link =====
  function renderPatient(){
    const el = $('#patientStatus');
    if (!state.patient){ el.textContent = 'No patient linked'; return; }
    el.textContent = `Patient: ${state.patient.name || state.patient.patient_name || state.patient.id || state.patient.patient_id}`;
  }

  function newPatientDialog(){
    const n = prompt('Enter patient name'); if(!n) return;
    const id = 'PID' + Date.now().toString().slice(-6);
    state.patient = { patient_id:id, name:n };
    renderPatient(); persist();
  }

  async function startScan(kind){
    try{
      if (!window.Scanner || !Scanner.ensureLoaded){
        return alert('Scanner library not loaded. Check network / script tag.');
      }
      await Scanner.ensureLoaded();
      const code = await Scanner.startOnce({ facingMode:'environment' });
      if (!code) return;

      if (kind === 'patient'){
        // Try to match with patients.csv (optional)
        try{
          const ptxt = await fetch('../data/patients.csv').then(r=>r.text());
          const rows = CSV.parse(ptxt);
          const found = rows.find(r => r.patient_id === code || r.barcode === code);
          state.patient = found || { patient_id: code, name:'Unknown' };
        }catch{
          state.patient = { patient_id: code, name:'Unknown' };
        }
        renderPatient(); persist();
      } else if (kind === 'item'){
        const item = state.inventory.find(i =>
          String(i.barcode||i.Barcode||'') === code ||
          String(i.batch||i.Batch||'') === code
        );
        if (item) addToCart(item);
        else alert('Item not found for code: ' + code);
      }
    }catch(err){
      console.error(err);
      alert('Camera/scan permission denied or not available.');
    }
  }

  // ===== Purchase (minimal stub to match UI) =====
  function addPurchaseRow(){
    const body = $('#purchaseBody');
    if (!state.inventory.length){
      if (body.children.length===1) body.innerHTML='';
      const tr = document.createElement('tr');
      tr.innerHTML = `<td contenteditable="true">Item name</td>
        <td contenteditable="true"></td>
        <td class="num" contenteditable="true">1</td>
        <td class="num" contenteditable="true">10.00</td>
        <td class="num" contenteditable="true">15.00</td>
        <td class="num" contenteditable="true">12</td>
        <td><button class="chip">Remove</button></td>`;
      body.appendChild(tr);
      return;
    }
    // seed with first stock row
    const s = state.inventory[0];
    if (body.children.length===1 && body.children[0].querySelector('.muted')) body.innerHTML='';
    const tr = document.createElement('tr');
    tr.innerHTML = `<td contenteditable="true">${s.name || s.Item || 'Item'}</td>
      <td contenteditable="true">${s.batch||''}</td>
      <td class="num" contenteditable="true">1</td>
      <td class="num" contenteditable="true">${money(s.cost||s.cost_price||10)}</td>
      <td class="num" contenteditable="true">${money(s.mrp||15)}</td>
      <td class="num" contenteditable="true">${s.gst||12}</td>
      <td><button class="chip">Remove</button></td>`;
    body.appendChild(tr);
    body.addEventListener('click', e=>{
      const b = e.target.closest('button.chip'); if(!b) return;
      b.closest('tr').remove();
      if (!$('#purchaseBody').children.length){
        $('#purchaseBody').innerHTML = '<tr><td colspan="7" class="muted">Add purchase items‚Ä¶</td></tr>';
      }
    }, { once:true });
  }

  // ===== Stock =====
  function renderStock(){
    const q = ($('#sSearch').value||'').toLowerCase();
    const f = $('#sFilter').value;
    const now = new Date();

    let rows = state.inventory.slice();
    if (q){
      rows = rows.filter(r =>
        (r.name||r.Item||'').toLowerCase().includes(q) ||
        (r.batch||'').toLowerCase().includes(q) ||
        (r.hsn||r.HSN||'').toLowerCase().includes(q)
      );
    }
    if (f){
      rows = rows.filter(r => {
        const qty = Number(r.qty||r.quantity||0);
        const exp = r.expiry || r.exp || '';
        let daysTo = 9999;
        if (exp){
          const [mm,yy] = exp.split('/'); // MM/YY
          const dt = new Date('20'+(yy||'99'), (mm?Number(mm)-1:0)+1, 0);
          daysTo = (dt - now)/(1000*60*60*24);
        }
        if (f==='low') return qty <= Number(r.min_qty||5);
        if (f==='expired') return daysTo < 0;
        if (f==='near') return daysTo >= 0 && daysTo <= 60;
        return true;
      });
    }

    const body = $('#stockBody');
    body.innerHTML = '';
    if (!rows.length){ body.innerHTML = '<tr><td colspan="6" class="muted">No items</td></tr>'; return; }

    for (const r of rows){
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${r.name||r.Item||'Item'}</td>
        <td>${r.batch||''}</td>
        <td>${r.expiry||r.exp||''}</td>
        <td class="num">${r.qty||r.quantity||0}</td>
        <td class="num">${money(r.mrp||0)}</td>
        <td class="num">${r.gst||0}</td>
      `;
      body.appendChild(tr);
    }
  }

  function exportStock(){
    const head = ['name','batch','expiry','qty','mrp','gst'];
    const rows = [head.join(',')].concat(
      state.inventory.map(r =>
        [r.name||r.Item||'', r.batch||'', r.expiry||r.exp||'', r.qty||r.quantity||0, r.mrp||0, r.gst||0].join(',')
      )
    ).join('\n');
    const blob = new Blob([rows], {type:'text/csv'});
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'stock.csv';
    a.click();
  }

  // ===== Reports =====
  function renderReports(){
    const range = $('#rRange .chip.active')?.dataset.range || 'today';
    const today = new Date(); const start = new Date(today);

    if (range==='today'){ /* start= today */ }
    else if (range==='7d'){ start.setDate(today.getDate()-6); }
    else if (range==='30d'){ start.setDate(today.getDate()-29); }
    else if (range==='mtd'){ start.setDate(1); }

    // filter invoices by date
    const inRange = (dstr)=>{
      if (!dstr) return false;
      const [dd,mm,yy] = dstr.split(/[\/\-]/);
      const d = new Date(Number(yy?.length===2?'20'+yy:yy||today.getFullYear()), Number(mm||1)-1, Number(dd||1));
      return d >= start && d <= today;
    };

    const invs = state.invoices.filter(i => inRange(i.date||i.invoice_date||i.Date));
    const ids = new Set(invs.map(i => i.invoice_id||i.id));
    const items = state.invoiceItems.filter(it => ids.has(it.invoice_id||it.id));

    // totals
    const total = invs.reduce((s,i)=> s + Number(i.total||i.Total||0), 0);
    const count = invs.length;
    const itemsCount = items.reduce((s,i)=> s + Number(i.qty||i.quantity||0), 0);

    // top item
    const byItem = {};
    for (const it of items){
      const name = it.item_name || it.item || it.name || 'Item';
      byItem[name] = (byItem[name]||0) + Number(it.qty||0);
    }
    const top = Object.entries(byItem).sort((a,b)=>b[1]-a[1])[0]?.[0] || '‚Äî';

    // write
    $('#rTotal').textContent = money(total);
    $('#rBills').textContent = String(count);
    $('#rItems').textContent = String(itemsCount);
    $('#rTop').textContent = top;
  }
  </script>
</body>
</html>
